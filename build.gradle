
buildscript {
    ext.cubaVersion = '6.1.0'
    repositories {
        maven {
            url 'https://repo.cuba-platform.com/content/groups/work'
            credentials {
                username(rootProject.hasProperty('repoUser') ? rootProject['repoUser'] : 'cuba')
                password(rootProject.hasProperty('repoPass') ? rootProject['repoPass'] : 'cuba123')
            }
        }
        maven {
            url 'https://repo.cuba-platform.com/content/groups/premium'
            credentials {
                username(rootProject.hasProperty('premiumRepoUser') ? rootProject['premiumRepoUser'] : System.getenv('CUBA_PREMIUM_USER'))
                password(rootProject.hasProperty('premiumRepoPass') ? rootProject['premiumRepoPass'] : System.getenv('CUBA_PREMIUM_PASSWORD'))
            }
        }
    }
    dependencies {
        classpath "com.haulmont.gradle:cuba-plugin:$cubaVersion"
    }
}

def globalModule = project(':app-global')
def coreModule = project(':app-core')
def guiModule = project(':app-gui')
def webModule = project(':app-web')
def desktopModule = project(':app-desktop')

def hsql = 'org.hsqldb:hsqldb:2.2.9'
def servletApi = 'org.apache.tomcat:tomcat-servlet-api:8.0.26'

apply(plugin: 'idea')
apply(plugin: 'cuba')

cuba {
    artifact {
        group = 'com.sample.library'
        version = '0.1'
        isSnapshot = true
    }
    tomcat {
        dir = "$project.rootDir/build/tomcat"
    }
    ide {
        copyright = 'Copyright (c) 2015 Haulmont'
    }
}

configure([globalModule, coreModule, guiModule, webModule, desktopModule]) {
    apply(plugin: 'java')
    apply(plugin: 'idea')
    apply(plugin: 'maven')
    apply(plugin: 'cuba')

    dependencies {
        testCompile('junit:junit:4.5')
    }

    task sourceJar(type: Jar) {
        from file('src')
        classifier = 'sources'
    }

    artifacts {
        archives sourceJar
    }

    // temporary fix before updating YARG
    configurations.all { 
        exclude(group: 'bouncycastle')
        exclude(group: 'org.bouncycastle') 
    }
}

configure(globalModule) {
    dependencies {
        compile("com.haulmont.cuba:cuba-global:$cubaVersion")
        compile("com.haulmont.reports:reports-global:$cubaVersion")

    }

    task enhance(type: CubaEnhancing) 
}

configure(coreModule) {

    configurations {
        jdbc
        dbscripts
    }

    dependencies {
        compile(globalModule)
        provided(servletApi)
        jdbc(hsql)
        testRuntime(hsql)
        compile("com.haulmont.cuba:cuba-core:$cubaVersion")
        testCompile("com.haulmont.cuba:cuba-core-tests:$cubaVersion")
        testCompile("com.haulmont.cuba:cuba-shared-lib:$cubaVersion")
        dbscripts("com.haulmont.cuba:cuba-core:$cubaVersion:db@zip")
        compile("com.haulmont.reports:reports-core:$cubaVersion")
        dbscripts("com.haulmont.reports:reports-core:$cubaVersion:db@zip")

    }

    task deploy(dependsOn: assemble, type: CubaDeployment) {
        appName = 'app-core'
        appJars('cuba-global', 'reports-global', 'cuba-core', 'reports-core', 
                'app-global', 'app-core')
    }

    task startDb(description: 'Starts local HSQLDB server', type: CubaHsqlStart) {
        dbName = 'library'
    }

    task stopDb(description: 'Stops local HSQLDB server', type: CubaHsqlStop)  {
        dbName = 'library'
    }

    task createDb(dependsOn: assemble, description: 'Creates local database', type: CubaDbCreation) {
        host = 'localhost'
        dbms = 'hsql'
        dbName = 'library'
        dbUser = 'sa'
        dbPassword = ''
    }

    task updateDb(dependsOn: assemble, description: 'Updates local database', type: CubaDbUpdate) {
        host = 'localhost'
        dbms = 'hsql'
        dbName = 'library'
        dbUser = 'sa'
        dbPassword = ''
    }

    task removeDb(description: 'Removes local HSQL database', type: Delete) {
        delete new File("$rootProject.projectDir/data")
    }

    task killDb(description: 'Kill local HSQLDB server process running on port 9001', type: CubaKillProcess) {
        port = 9001
    }
}

configure(guiModule) {
    dependencies {
        compile(globalModule)
        compile("com.haulmont.cuba:cuba-client:$cubaVersion")
        compile("com.haulmont.cuba:cuba-gui:$cubaVersion")
        compile("com.haulmont.reports:reports-gui:$cubaVersion")

    }

    task deployConf(type: Copy) {
        from file('src')
        include "com/sample/library/**"
        into "$cuba.tomcat.dir/conf/app"
    }

    task clearMessagesCache(type: CubaClearMessagesCache) {
        appName = 'app'
    }
    deployConf.dependsOn clearMessagesCache
}

configure(webModule) {
    configurations {
        webcontent
    }

    dependencies {
        provided(servletApi)
        compile(globalModule)
        compile(guiModule)
        compile("com.haulmont.cuba:cuba-web:$cubaVersion")
        webcontent("com.haulmont.cuba:cuba-web:$cubaVersion:web@zip")
        webcontent("com.haulmont.cuba:cuba-web-toolkit:$cubaVersion:web@zip")
        compile("com.haulmont.reports:reports-web:$cubaVersion")
        

    }

    task webArchive(type: Zip) {
        from file('web')
        classifier = 'web'
    }

    artifacts {
        archives webArchive
    }

    task deployConf(type: Copy) {
        from file('src')
        include "com/sample/library/**"
        into "$cuba.tomcat.dir/conf/app"
    }

    task clearMessagesCache(type: CubaClearMessagesCache) {
        appName = 'app'
    }
    deployConf.dependsOn clearMessagesCache

    task cleanConf(description: 'Cleans up conf directory') << {
        def dir = new File(cuba.tomcat.dir, '/conf/app')
        if (dir.isDirectory()) {
            ant.delete(includeemptydirs: true) {
                fileset(dir: dir, includes: '**/*', excludes: 'local.app.properties')
            }
        }
    }

    task deploy(dependsOn: [assemble, cleanConf], type: CubaDeployment) {
        appName = 'app'
        appJars('cuba-web', 'reports-web', 'cuba-client', 'cuba-gui', 'reports-gui', 'cuba-global', 'reports-global', 
                'app-global', 'app-gui', 'app-web', 'cuba-rest-api')
    }
}

configure(desktopModule) {
    apply(plugin: 'application')
    mainClassName = 'com.sample.library.desktop.App'

    dependencies {
        compile(globalModule)
        compile(guiModule)
        compile("com.haulmont.cuba:cuba-desktop:$cubaVersion")
        compile("com.haulmont.reports:reports-desktop:$cubaVersion")

    }
    assemble.dependsOn = [ classes ]

    jar {
        manifest {
            attributes("Permissions": "all-permissions")
        }
    }

    installApp {
        into("${projectDir}/../../build/" + applicationName)
    }

    task deploy(dependsOn: installApp)

    task createWebStart(dependsOn: [assemble, jar], type: CubaWebStartCreation) {
        signJarsKeystore = "${projectDir}/webstart/sign-jars-keystore.jks"
        signJarsAlias = 'signJars'
        signJarsPassword = 'HaulmontSignJars'
        indexFileName = "${projectDir}/webstart/index.html"
        basePath = 'app-webstart'
    }

    task deployWebStart(dependsOn: createWebStart, type: CubaWebStartDeployment) {
        basePath = 'app-webstart'
    }
}


task undeploy(type: Delete, dependsOn: ':app-web:cleanConf') {
    delete("$cuba.tomcat.dir/shared")
    delete("$cuba.tomcat.dir/webapps/app-core")
    delete("$cuba.tomcat.dir/webapps/app")
    delete("$cuba.tomcat.dir/webapps/app-webstart")
}

task restart(dependsOn: ['stop', ':app-core:deploy', ':app-web:deploy'], description: 'Redeploys applications and restarts local Tomcat') << {
    ant.waitfor(maxwait: 6, maxwaitunit: 'second', checkevery: 2, checkeveryunit: 'second') {
        not {
            socket(server: 'localhost', port: '8787')
        }
    }
    start.execute()
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
}
